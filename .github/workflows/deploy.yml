name: cicd secure pipeline

on:
  # This Github action is built on the assumption that the Main branch is protected, so there are no pushs to main 
  workflow_dispatch:
  pull_request:
    branches: [ main ]

jobs:    
  job-scan-code:
    runs-on: ubuntu-latest
    name: Scan code with Code Guru
    steps:
    # job 1 - step 1: Checkout the repository and provide your AWS credentials
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1  # Region to access CodeGuru 

    # job 1 - step 2: Add CodeGuru Reviewer Action
    - name: CodeGuru Reviewer
      uses: aws-actions/codeguru-reviewer@v1.1
      with:
        build_path: target # build artifact(s) directory
        s3_bucket: codeguru-reviewer-name-of-repo  # S3 Bucket with "codeguru-reviewer-*" prefix    
    
    # job 1 - step 3: Upload results into GitHub
    - name: Upload review result
      if: ${{ github.event_name != 'push' }}
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: codeguru-results.sarif.json
  
  job-scan-lib:
    # needs: job-scan-code
    name: Scans Libraries used in Repo
    runs-on: ubuntu-latest
    # job 2 - step 1: Checkout the repository and provide your AWS credentials
    steps:
      - name: pwd
        run: echo $(pwd)
      # job 3 - step 1: Check out code
      - name: Check out code
        uses: actions/checkout@v2
      - name: list
        run: echo .** 
      
      - name: pyupio/safety
        uses: pyupio/safety@2.0.0
        with:
          api-key: ${{secrets.SAFETY_API_KEY}}
          scan: 'file'
          requirements: './requirements.txt'

  job-push-ecr:
    # needs: [job-scan-lib,job-scan-code]
    name: Builds Image of repo and pushes omage to ECR
    runs-on: ubuntu-latest
    steps:
    # job 3 - step 1: Check out code
    - name: Check out code
      uses: actions/checkout@v2
    # job 3 - step 2: Credentials to ECR
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1
    # job 3 - step 3: Login to ECR 
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    # job 3 - step 4: Build image using Docker and push to ECR
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: name_of_repo # Enter the name of the repo here, ECS will be configured to look here, watch video.
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
